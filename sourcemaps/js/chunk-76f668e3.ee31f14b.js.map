{"version":3,"sources":["webpack:///./src/modules/confirmation/ModuleConfirmation.vue?3cba","webpack:///./src/modules/confirmation/ModuleConfirmation.vue?fa4b","webpack:///./src/modules/confirmation/ModuleConfirmation.vue","webpack:///./src/modules/confirmation/handlers/dataToAction.js","webpack:///./src/modules/confirmation/handlers/parseTokenData.js","webpack:///./src/assets/images/icons/hardware-wallets/Ledger-Nano-X-Label-Icon.svg","webpack:///./src/modules/confirmation/ModuleConfirmation.vue?724c","webpack:///src/modules/confirmation/ModuleConfirmation.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","showSuccessModal","showSuccessSwap","successTitle","resetSuccess","reset","network","links","successBodyText","showCrossChainModal","tx","title","rejectTransaction","sendCrossChain","on","showTxOverlay","btnAction","disableBtn","toNonEth","scopedSlots","_u","key","fn","ref","staticClass","_v","getArticle","isSwap","swapInfo","to","from","fromImg","fromType","toType","toImg","fromVal","toVal","selectedProvider","toUsdVal","fromUsdVal","txFee","gasPriceType","isHardware","txTo","txFeeUSD","value","toTxData","allToDetails","sendCurrency","_e","unsignedTxArr","length","signingPending","error","model","callback","$$v","panel","expression","_l","transaction","i","class","transactions","$event","scrollToElement","signing","_s","dataToAction","directives","name","rawName","isBatch","signedTxArray","Object","keys","signedTxObject","txVal","termRoute","proxy","footer","showSignOverlay","signature","copyToClipboard","staticRenderFns","component","signatures","0x095ea7b3","data","params","Web3","eth","abi","decodeParameters","substr","utils","toBN","isZero","0x7c025200","0x28ed4f6c","0x23b872dd","0xacf1a841","0xac9650d8","0xa9059cbb","0xca0bfcce","0xf14fcbc8","0xf7a16963","0x33aaf6f2","getSignature","parseTokensData","web3","token","store","getters","jsonInterface","constant","inputs","type","outputs","payable","stateMutability","transferFuncSig","encodeFunctionSignature","tokenData","tokenTransferTo","tokenTransferVal","tokenSymbol","BigNumber","div","pow","decimals","toFixed","toString","symbol","module","exports","components","AppScrollBlock","ConfirmationMesssage","AppModal","ConfirmationSwapTransactionDetails","ConfirmationSendTransactionDetails","ConfirmWithWallet","SuccessModal","CrossChainConfirmation","mixins","handlerAnalytics","text","linkTitle","link","resolver","toDetails","explorer","ROUTES_HOME","TERMS_OF_SERVICE","PATH","computed","mapState","mapGetters","hasOwnProperty","isWeb3Wallet","identifier","WALLET_TYPES","WEB3_WALLET","WALLET_CONNECT","isOtherWallet","MEW_CONNECT","WALLET_LINK","isOnLedger","LEDGER","isNotSoftware","showConfirmWithWallet","newArr","concat","isEmpty","arrayParser","toNickname","addressBookStore","find","item","_this$tx$to","_item$address","toLowerCase","address","ensName","nickname","selected","gasPrice","fromWei","hexToNumberString","batchGasPrice","gasLimit","gas","reduce","acc","currentValue","plus","parsedTxFee","toWei","times","getFiatValue","fiatValue","parsedValue","amount","txSigned","watch","newVal","handler","trackSwap","showSuccess","deep","immediate","created","EventBus","$on","EventNames","SHOW_TX_CONFIRM_MODAL","parseRawData","transactionFee","signTx","SHOW_SWAP_TX_MODAL","arr","toTokenType","isEth","SHOW_BATCH_TX_MODAL","isHardwareWallet","confirmInfo","signBatchTx","SHOW_MSG_CONFIRM_MODAL","msg","instance","signMessage","then","res","result","Buffer","JSON","stringify","sig","version","signer","signedMessage","catch","e","errorHandler","SHOW_CROSS_CHAIN_MODAL","txObj","val","beforeDestroy","$off","mounted","isOfflineApp","methods","rejected","bool","_id","setTimeout","includes","document","getElementById","wrapper","$refs","scrollableContent","options","duration","offset","$vuetify","goTo","container","parseTokenData","fromTxData","currency","currencyName","_this","_method","_arr","promises","map","idx","_tx","_rawTx","rawTransaction","promiEvent","isHex","setEvents","$store","dispatch","once","receipt","hash","transactionHash","chainID","storeKey","sha3","localStoredObj","locStore","nonce","sanitizeHex","timestamp","err","rejectedError","message","emitSwapTxFail","sendSignedTx","trackDapp","param","isArray","lastHash","blockExplorerTX","replace","event","signTransaction","toastError","signed","batchTxEvents","objClone","cloneDeep","push","Error","_signedTx","handleNotification","_err$receipt","sendBatchTransaction","messageConfirmationContainer","signatureContent","input","select","execCommand","window","getSelection","removeAllRanges","Toast","$t","SUCCESS","encodeABI","toAdd","name_long","hexToNumber","filter"],"mappings":"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","file":"js/chunk-76f668e3.ee31f14b.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('success-modal',{attrs:{\"show-success-modal\":_vm.showSuccessModal,\"show-success-swap\":_vm.showSuccessSwap,\"success-title\":_vm.successTitle,\"reset-success\":_vm.resetSuccess,\"reset\":_vm.reset,\"network\":_vm.network,\"links\":_vm.links,\"success-body-text\":_vm.successBodyText,\"has-close-button\":false}}),_c('cross-chain-confirmation',{attrs:{\"show-cross-chain-modal\":_vm.showCrossChainModal,\"tx-obj\":_vm.tx,\"title\":_vm.title,\"reset\":_vm.rejectTransaction,\"sent-btc\":_vm.sendCrossChain},on:{\"close\":_vm.rejectTransaction}}),_c('app-modal',{attrs:{\"show\":_vm.showTxOverlay,\"title\":_vm.title !== '' ? _vm.title : 'Confirmation',\"close\":_vm.rejectTransaction,\"btn-action\":_vm.btnAction,\"btn-enabled\":_vm.disableBtn,\"btn-text\":_vm.toNonEth ? 'Proceed with swap' : 'Confirm & Send',\"scrollable\":true,\"anchored\":true,\"width\":\"650\"},on:{\"close\":_vm.rejectTransaction},scopedSlots:_vm._u([{key:\"dialogBody\",fn:function(){return [_c('v-card-text',{ref:\"scrollableContent\",staticClass:\"py-0 px-4 px-md-0\"},[_c('div',{staticClass:\"px-4 py-6 pr-6 textBlack2--text border-radius--5px mb-5\"},[_c('b',[_vm._v(\"Please double check everything.\")]),_vm._v(\" MEW team will not be able to reverse your transaction once it's submitted. You will still be charged gas fee even if the transaction fails. \"),_c('a',{attrs:{\"href\":_vm.getArticle('my-txn-failed-charged'),\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"Learn more.\")])]),(!_vm.isSwap)?_c('confirmation-send-transaction-details',{attrs:{\"to\":_vm.txTo,\"network\":_vm.network,\"tx-fee\":_vm.txFee,\"tx-fee-usd\":_vm.txFeeUSD,\"value\":_vm.value,\"to-tx-data\":_vm.tx.toTxData,\"to-details\":_vm.allToDetails,\"send-currency\":_vm.sendCurrency}}):_c('confirmation-swap-transaction-details',{attrs:{\"to\":_vm.swapInfo.to,\"from\":_vm.swapInfo.from,\"from-img\":_vm.swapInfo.fromImg,\"from-type\":_vm.swapInfo.fromType,\"to-type\":_vm.swapInfo.toType,\"to-img\":_vm.swapInfo.toImg,\"from-val\":_vm.swapInfo.fromVal,\"to-val\":_vm.swapInfo.toVal,\"provider\":_vm.swapInfo.selectedProvider,\"to-usd\":_vm.swapInfo.toUsdVal,\"from-usd\":_vm.swapInfo.fromUsdVal,\"tx-fee\":_vm.swapInfo.txFee,\"gas-price-type\":_vm.swapInfo.gasPriceType,\"is-hardware\":_vm.isHardware,\"is-to-non-eth\":_vm.toNonEth,\"to-currency\":_vm.swapInfo.toType,\"to-address\":_vm.swapInfo.to}}),(_vm.isOnLedger)?_c('div',{staticClass:\"ledger-warning d-flex justify-space-between px-4 py-6 border-radius--5px mb-5\"},[_c('div',[_c('v-img',{staticClass:\"ml-15\",attrs:{\"src\":require('@/assets/images/icons/hardware-wallets/Ledger-Nano-X-Label-Icon.svg'),\"alt\":\"Ledger Wallet\",\"max-width\":\"11em\",\"max-height\":\"2.5em\",\"contain\":\"\"}})],1),_c('span',{staticClass:\"textBlack2--text ml-2\"},[_c('b',[_vm._v(\"Using Ledger?\")]),_vm._v(\" Consider turning off 'debug data' before proceeding. Additional steps associated with the 'debug feature' on Ledger may be required to approve this transaction. \")])]):_vm._e(),(_vm.showConfirmWithWallet)?_c('confirm-with-wallet',{attrs:{\"tx-length\":_vm.unsignedTxArr.length > 0 ? _vm.unsignedTxArr.length : 1,\"signed\":_vm.signingPending,\"error\":_vm.error}}):_vm._e(),_c('v-expansion-panels',{staticClass:\"expansion-border\",attrs:{\"accordion\":\"\",\"multiple\":\"\",\"flat\":\"\"},model:{value:(_vm.panel),callback:function ($$v) {_vm.panel=$$v},expression:\"panel\"}},_vm._l((_vm.transactions),function(transaction,i){return _c('v-expansion-panel',{key:(\"\" + (transaction.title) + (transaction.value) + i),staticClass:\"bgWalletBlockDark\",class:{\n              'expansion-panel-border-bottom':\n                _vm.transactions.length > 1 && i !== _vm.transactions.length - 1\n            },on:{\"click\":function($event){return _vm.scrollToElement(i)}}},[_c('v-expansion-panel-header',{staticClass:\"expansion-header\",attrs:{\"disable-icon-rotate\":_vm.signing}},[_c('v-row',{staticClass:\"align-center pr-7 pl-2\"},[_c('p',{staticClass:\"ma-0 pl-1\"},[_c('span',{staticClass:\"font-weight-bold\"},[_vm._v(\"Transaction \"+_vm._s(_vm.transactions.length > 1 ? (\"\" + (i + 1)) : \"details\")+\" \")]),_c('br'),(_vm.isBatch)?_c('span',{staticClass:\"ma-0 mew-label greyPrimary--text\"},[_vm._v(_vm._s(_vm.isSwap ? 'Swap ' : '')+\" part \"+_vm._s(i + 1)+\" - \"+_vm._s(_vm.dataToAction(_vm.unsignedTxArr[i])))]):(_vm.dataToAction(_vm.tx) !== '')?_c('span',{staticClass:\"ma-0 mew-label greyPrimary--text\"},[_vm._v(_vm._s(_vm.dataToAction(_vm.tx)))]):_vm._e()]),_c('v-spacer'),(_vm.signing)?_c('div',[_c('v-progress-circular',{directives:[{name:\"show\",rawName:\"v-show\",value:(\n                      _vm.error === '' && _vm.isBatch && _vm.signedTxArray.length < i + 1\n                    ),expression:\"\\n                      error === '' && isBatch && signedTxArray.length < i + 1\\n                    \"}],staticClass:\"pr-7\",attrs:{\"indeterminate\":\"\",\"color\":\"greenPrimary\",\"size\":\"20\",\"width\":\"2\"}}),_c('v-progress-circular',{directives:[{name:\"show\",rawName:\"v-show\",value:(\n                      !_vm.isBatch && Object.keys(_vm.signedTxObject).length === 0\n                    ),expression:\"\\n                      !isBatch && Object.keys(signedTxObject).length === 0\\n                    \"}],staticClass:\"pr-7\",attrs:{\"indeterminate\":\"\",\"color\":\"greenPrimary\",\"size\":\"20\",\"width\":\"2\"}}),_c('v-icon',{directives:[{name:\"show\",rawName:\"v-show\",value:(\n                      !_vm.isBatch && Object.keys(_vm.signedTxObject).length !== 0\n                    ),expression:\"\\n                      !isBatch && Object.keys(signedTxObject).length !== 0\\n                    \"}],attrs:{\"color\":\"greenPrimary\"}},[_vm._v(\" mdi-check \")]),_c('v-icon',{directives:[{name:\"show\",rawName:\"v-show\",value:(\n                      _vm.error === '' && _vm.isBatch && _vm.signedTxArray.length >= i + 1\n                    ),expression:\"\\n                      error === '' && isBatch && signedTxArray.length >= i + 1\\n                    \"}],attrs:{\"color\":\"greenPrimary\"}},[_vm._v(\" mdi-check \")])],1):_vm._e()],1)],1),_c('v-expansion-panel-content',{attrs:{\"id\":i}},[_c('div',{staticClass:\"pa-6 pt-0\"},_vm._l((transaction),function(txVal){return _c('v-row',{key:(\"\" + (txVal.title) + (txVal.value)),staticClass:\"d-flex justify-space-between mt-3\",attrs:{\"no-gutters\":\"\"}},[_c('v-col',{staticClass:\"d-flex d-sm-block ma-0 greyPrimary--text\",attrs:{\"cols\":\"12\",\"md\":\"3\"}},[_vm._v(\" \"+_vm._s(txVal.title)+\" \")]),_c('v-col',{attrs:{\"cols\":\"12\",\"md\":\"9\"}},[_c('app-scroll-block',[_c('div',{staticClass:\"data-values text-md-right\"},[_vm._v(\" \"+_vm._s(txVal.value)+\" \")])])],1)],1)}),1)])],1)}),1),(_vm.toNonEth)?_c('div',{staticClass:\"pt-4\"},[_vm._v(\" By clicking 'Proceed with swap', I agree to the \"),_c('a',{attrs:{\"href\":\"https://changelly.com/aml-kyc\",\"target\":\"_blank\"}},[_vm._v(\" Changelly AML/KYC \")]),_vm._v(\" and \"),_c('router-link',{attrs:{\"to\":_vm.termRoute,\"target\":\"_blank\"}},[_vm._v(\"Terms of Service\")])],1):_vm._e()],1)]},proxy:true}])}),_c('mew-overlay',{attrs:{\"footer\":_vm.footer,\"show-overlay\":_vm.showSignOverlay,\"title\":_vm.title ? _vm.title : 'Message',\"close\":_vm.reset,\"content-size\":\"large\"}},[_c('confirmation-messsage',{ref:\"messageConfirmationContainer\",attrs:{\"msg\":_vm.signature,\"copy\":_vm.copyToClipboard}})],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ModuleConfirmation.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ModuleConfirmation.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ModuleConfirmation.vue?vue&type=template&id=159de2b8&scoped=true&\"\nimport script from \"./ModuleConfirmation.vue?vue&type=script&lang=js&\"\nexport * from \"./ModuleConfirmation.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ModuleConfirmation.vue?vue&type=style&index=0&id=159de2b8&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"159de2b8\",\n  null\n  \n)\n\nexport default component.exports","import Web3 from 'web3';\nconst signatures = {\n  '0x095ea7b3': ({ data }) => {\n    const params = new Web3().eth.abi.decodeParameters(\n      ['address', 'uint256'],\n      `${data.substr(10)}`\n    );\n    const value = Web3.utils.toBN(params[1]);\n    if (value.isZero()) return 'Reset Approval';\n    return 'Approval';\n  },\n  '0x7c025200': () => {\n    return 'Swap';\n  },\n  '0x28ed4f6c': () => {\n    return 'Set ENS controller';\n  },\n  '0x23b872dd': () => {\n    return 'Transfer ENS name';\n  },\n  '0xacf1a841': () => {\n    return 'Renew ENS name';\n  },\n  '0xac9650d8': () => {\n    return 'Set ENS coins/text records';\n  },\n  '0xa9059cbb': () => {\n    return 'Transfer Tokens';\n  },\n  '0xca0bfcce': () => {\n    return `Eth2 Staking`;\n  },\n  '0xf14fcbc8': () => {\n    return 'ENS Commitment';\n  },\n  '0xf7a16963': () => {\n    return 'ENS Registration';\n  },\n  '0x33aaf6f2': () => {\n    return 'ETH Blocks Mint';\n  }\n};\nconst getSignature = data => data.substr(0, 10);\nexport default tx => {\n  if (!tx.data || tx.data === '0x') return '';\n  else if (!signatures[getSignature(tx.data)]) return '';\n  return signatures[getSignature(tx.data)]({\n    from: tx.from,\n    to: tx.to,\n    data: tx.data,\n    value: tx.value\n  });\n};\n","import BigNumber from 'bignumber.js';\nimport store from '@/core/store';\nimport Web3 from 'web3';\nfunction parseTokensData(data, to) {\n  const web3 = new Web3();\n  const token = store.getters['external/contractToToken'](to);\n  const jsonInterface = {\n    constant: false,\n    inputs: [\n      { name: '_to', type: 'address' },\n      { name: '_amount', type: 'uint256' }\n    ],\n    name: 'transfer',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  };\n  const transferFuncSig = web3.eth.abi.encodeFunctionSignature(jsonInterface);\n  const tokenData = {\n    tokenTransferTo: '',\n    tokenTransferVal: '',\n    tokenSymbol: ''\n  };\n  if (data.substr(0, 10) === transferFuncSig) {\n    const params = web3.eth.abi.decodeParameters(\n      ['address', 'uint256'],\n      `${data.substr(10)}`\n    );\n    const value = new BigNumber(params[1]);\n    tokenData.tokenTransferTo = params[0];\n    tokenData.tokenTransferVal = token\n      ? value.div(new BigNumber(10).pow(token.decimals)).toFixed().toString()\n      : value.toString();\n    tokenData.tokenSymbol = token ? token.symbol : 'Unidentified Token';\n  }\n  return tokenData;\n}\n\nexport default parseTokensData;\n","module.exports = __webpack_public_path__ + \"img/Ledger-Nano-X-Label-Icon.e56dc6a3.svg\";","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ModuleConfirmation.vue?vue&type=style&index=0&id=159de2b8&prod&lang=scss&scoped=true&\"","<template>\n  <div>\n    <success-modal\n      :show-success-modal=\"showSuccessModal\"\n      :show-success-swap=\"showSuccessSwap\"\n      :success-title=\"successTitle\"\n      :reset-success=\"resetSuccess\"\n      :reset=\"reset\"\n      :network=\"network\"\n      :links=\"links\"\n      :success-body-text=\"successBodyText\"\n      :has-close-button=\"false\"\n    />\n    <cross-chain-confirmation\n      :show-cross-chain-modal=\"showCrossChainModal\"\n      :tx-obj=\"tx\"\n      :title=\"title\"\n      :reset=\"rejectTransaction\"\n      :sent-btc=\"sendCrossChain\"\n      @close=\"rejectTransaction\"\n    />\n    <app-modal\n      :show=\"showTxOverlay\"\n      :title=\"title !== '' ? title : 'Confirmation'\"\n      :close=\"rejectTransaction\"\n      :btn-action=\"btnAction\"\n      :btn-enabled=\"disableBtn\"\n      :btn-text=\"toNonEth ? 'Proceed with swap' : 'Confirm & Send'\"\n      :scrollable=\"true\"\n      :anchored=\"true\"\n      width=\"650\"\n      @close=\"rejectTransaction\"\n    >\n      <template #dialogBody>\n        <v-card-text ref=\"scrollableContent\" class=\"py-0 px-4 px-md-0\">\n          <div class=\"px-4 py-6 pr-6 textBlack2--text border-radius--5px mb-5\">\n            <b>Please double check everything.</b> MEW team will not be able to\n            reverse your transaction once it's submitted. You will still be\n            charged gas fee even if the transaction fails.\n            <a\n              :href=\"getArticle('my-txn-failed-charged')\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              >Learn more.</a\n            >\n          </div>\n          <confirmation-send-transaction-details\n            v-if=\"!isSwap\"\n            :to=\"txTo\"\n            :network=\"network\"\n            :tx-fee=\"txFee\"\n            :tx-fee-usd=\"txFeeUSD\"\n            :value=\"value\"\n            :to-tx-data=\"tx.toTxData\"\n            :to-details=\"allToDetails\"\n            :send-currency=\"sendCurrency\"\n          />\n          <confirmation-swap-transaction-details\n            v-else\n            :to=\"swapInfo.to\"\n            :from=\"swapInfo.from\"\n            :from-img=\"swapInfo.fromImg\"\n            :from-type=\"swapInfo.fromType\"\n            :to-type=\"swapInfo.toType\"\n            :to-img=\"swapInfo.toImg\"\n            :from-val=\"swapInfo.fromVal\"\n            :to-val=\"swapInfo.toVal\"\n            :provider=\"swapInfo.selectedProvider\"\n            :to-usd=\"swapInfo.toUsdVal\"\n            :from-usd=\"swapInfo.fromUsdVal\"\n            :tx-fee=\"swapInfo.txFee\"\n            :gas-price-type=\"swapInfo.gasPriceType\"\n            :is-hardware=\"isHardware\"\n            :is-to-non-eth=\"toNonEth\"\n            :to-currency=\"swapInfo.toType\"\n            :to-address=\"swapInfo.to\"\n          />\n\n          <!-- Ledger Warning Sheet -->\n          <div\n            v-if=\"isOnLedger\"\n            class=\"ledger-warning d-flex justify-space-between px-4 py-6 border-radius--5px mb-5\"\n          >\n            <div>\n              <v-img\n                :src=\"\n                  require('@/assets/images/icons/hardware-wallets/Ledger-Nano-X-Label-Icon.svg')\n                \"\n                alt=\"Ledger Wallet\"\n                max-width=\"11em\"\n                max-height=\"2.5em\"\n                contain\n                class=\"ml-15\"\n              />\n            </div>\n            <span class=\"textBlack2--text ml-2\">\n              <b>Using Ledger?</b> Consider turning off 'debug data' before\n              proceeding. Additional steps associated with the 'debug feature'\n              on Ledger may be required to approve this transaction.\n            </span>\n          </div>\n          <!-- transaction details -->\n          <confirm-with-wallet\n            v-if=\"showConfirmWithWallet\"\n            :tx-length=\"unsignedTxArr.length > 0 ? unsignedTxArr.length : 1\"\n            :signed=\"signingPending\"\n            :error=\"error\"\n          />\n\n          <v-expansion-panels\n            v-model=\"panel\"\n            accordion\n            multiple\n            flat\n            class=\"expansion-border\"\n          >\n            <v-expansion-panel\n              v-for=\"(transaction, i) in transactions\"\n              :key=\"`${transaction.title}${transaction.value}${i}`\"\n              :class=\"{\n                'expansion-panel-border-bottom':\n                  transactions.length > 1 && i !== transactions.length - 1\n              }\"\n              class=\"bgWalletBlockDark\"\n              @click=\"scrollToElement(i)\"\n            >\n              <v-expansion-panel-header\n                :disable-icon-rotate=\"signing\"\n                class=\"expansion-header\"\n              >\n                <v-row class=\"align-center pr-7 pl-2\">\n                  <p class=\"ma-0 pl-1\">\n                    <span class=\"font-weight-bold\"\n                      >Transaction\n                      {{ transactions.length > 1 ? `${i + 1}` : `details` }}\n                    </span>\n                    <br />\n                    <span\n                      v-if=\"isBatch\"\n                      class=\"ma-0 mew-label greyPrimary--text\"\n                      >{{ isSwap ? 'Swap ' : '' }} part {{ i + 1 }} -\n                      {{ dataToAction(unsignedTxArr[i]) }}</span\n                    >\n                    <span\n                      v-else-if=\"dataToAction(tx) !== ''\"\n                      class=\"ma-0 mew-label greyPrimary--text\"\n                      >{{ dataToAction(tx) }}</span\n                    >\n                  </p>\n                  <v-spacer />\n                  <div v-if=\"signing\">\n                    <v-progress-circular\n                      v-show=\"\n                        error === '' && isBatch && signedTxArray.length < i + 1\n                      \"\n                      indeterminate\n                      color=\"greenPrimary\"\n                      size=\"20\"\n                      width=\"2\"\n                      class=\"pr-7\"\n                    />\n                    <v-progress-circular\n                      v-show=\"\n                        !isBatch && Object.keys(signedTxObject).length === 0\n                      \"\n                      indeterminate\n                      color=\"greenPrimary\"\n                      size=\"20\"\n                      width=\"2\"\n                      class=\"pr-7\"\n                    />\n                    <v-icon\n                      v-show=\"\n                        !isBatch && Object.keys(signedTxObject).length !== 0\n                      \"\n                      color=\"greenPrimary\"\n                    >\n                      mdi-check\n                    </v-icon>\n                    <v-icon\n                      v-show=\"\n                        error === '' && isBatch && signedTxArray.length >= i + 1\n                      \"\n                      color=\"greenPrimary\"\n                    >\n                      mdi-check\n                    </v-icon>\n                  </div>\n                </v-row>\n              </v-expansion-panel-header>\n              <v-expansion-panel-content :id=\"i\">\n                <div class=\"pa-6 pt-0\">\n                  <v-row\n                    v-for=\"txVal in transaction\"\n                    :key=\"`${txVal.title}${txVal.value}`\"\n                    class=\"d-flex justify-space-between mt-3\"\n                    no-gutters\n                  >\n                    <v-col\n                      cols=\"12\"\n                      md=\"3\"\n                      class=\"d-flex d-sm-block ma-0 greyPrimary--text\"\n                    >\n                      {{ txVal.title }}\n                    </v-col>\n\n                    <v-col cols=\"12\" md=\"9\">\n                      <app-scroll-block>\n                        <div class=\"data-values text-md-right\">\n                          {{ txVal.value }}\n                        </div>\n                      </app-scroll-block>\n                    </v-col>\n                  </v-row>\n                </div>\n              </v-expansion-panel-content>\n            </v-expansion-panel>\n          </v-expansion-panels>\n          <div v-if=\"toNonEth\" class=\"pt-4\">\n            By clicking 'Proceed with swap', I agree to the\n            <a href=\"https://changelly.com/aml-kyc\" target=\"_blank\">\n              Changelly AML/KYC\n            </a>\n            and\n            <router-link :to=\"termRoute\" target=\"_blank\"\n              >Terms of Service</router-link\n            >\n          </div>\n        </v-card-text>\n      </template>\n    </app-modal>\n    <!--\n    ====================================================================================\n      Sign Message Confirmation\n    =====================================================================================\n    -->\n    <mew-overlay\n      :footer=\"footer\"\n      :show-overlay=\"showSignOverlay\"\n      :title=\"title ? title : 'Message'\"\n      :close=\"reset\"\n      content-size=\"large\"\n    >\n      <confirmation-messsage\n        ref=\"messageConfirmationContainer\"\n        :msg=\"signature\"\n        :copy=\"copyToClipboard\"\n      />\n    </mew-overlay>\n  </div>\n</template>\n\n<script>\nimport {\n  fromWei,\n  hexToNumberString,\n  hexToNumber,\n  toWei,\n  sha3,\n  isHex\n} from 'web3-utils';\nimport { isEmpty, isArray, cloneDeep } from 'lodash';\nimport { mapState, mapGetters } from 'vuex';\nimport BigNumber from 'bignumber.js';\nimport * as locStore from 'store';\n\nimport WALLET_TYPES from '@/modules/access-wallet/common/walletTypes';\nimport EventNames from '@/utils/web3-provider/events.js';\n\nimport { Toast, SUCCESS } from '@/modules/toast/handler/handlerToast';\nimport parseTokenData from './handlers/parseTokenData';\nimport { EventBus } from '@/core/plugins/eventBus';\nimport { setEvents } from '@/utils/web3-provider/methods/utils';\nimport { sanitizeHex } from '@/modules/access-wallet/common/helpers';\nimport dataToAction from './handlers/dataToAction';\nimport handlerAnalytics from '@/modules/analytics-opt-in/handlers/handlerAnalytics.mixin';\nimport { ROUTES_HOME } from '@/core/configs/configRoutes';\nimport errorHandler from './handlers/errorHandler';\n\nexport default {\n  name: 'ModuleConfirmation',\n  components: {\n    AppScrollBlock: () => import('@/core/components/AppScrollBlock'),\n    ConfirmationMesssage: () => import('./components/ConfirmationMessage'),\n    AppModal: () => import('@/core/components/AppModal'),\n    ConfirmationSwapTransactionDetails: () =>\n      import('./components/ConfirmationSwapTransactionDetails'),\n    ConfirmationSendTransactionDetails: () =>\n      import('./components/ConfirmationSendTransactionDetails'),\n    ConfirmWithWallet: () => import('./components/ConfirmWithWallet'),\n    SuccessModal: () => import('./components/SuccessModal'),\n    CrossChainConfirmation: () => import('./components/CrossChainConfirmation')\n  },\n  mixins: [handlerAnalytics],\n  data() {\n    return {\n      footer: {\n        text: 'Need help?',\n        linkTitle: 'Contact support',\n        link: 'mailto:support@myetherwallet.com'\n      },\n      showTxOverlay: false,\n      showSignOverlay: false,\n      showSuccessModal: false,\n      showSuccessSwap: false,\n      showCrossChainModal: false,\n      toNonEth: false,\n      isSwap: false,\n      tx: {},\n      resolver: () => {},\n      title: '',\n      signedTxObject: {},\n      signature: '',\n      unsignedTxArr: [],\n      signedTxArray: [],\n      swapInfo: {},\n      sendCurrency: {},\n      toDetails: {},\n      signing: false,\n      links: {\n        explorer: ''\n      },\n      error: '',\n      panel: [],\n      termRoute: `/${ROUTES_HOME.TERMS_OF_SERVICE.PATH}`\n    };\n  },\n  computed: {\n    ...mapState('wallet', [\n      'instance',\n      'web3',\n      'address',\n      'identifier',\n      'isHardware',\n      'isOfflineApp'\n    ]),\n    ...mapGetters('external', ['fiatValue']),\n    ...mapGetters('global', ['network', 'getFiatValue']),\n    ...mapGetters('article', ['getArticle']),\n    ...mapState('addressBook', ['addressBookStore']),\n    txTo() {\n      if (!this.isBatch)\n        return this.tx.hasOwnProperty('toTxData')\n          ? this.tx.toTxData.to\n          : this.tx.to;\n      return this.unsignedTxArr[0].to;\n    },\n    isWeb3Wallet() {\n      return (\n        this.identifier === WALLET_TYPES.WEB3_WALLET ||\n        this.identifier === WALLET_TYPES.WALLET_CONNECT\n      );\n    },\n    isOtherWallet() {\n      return (\n        this.identifier === WALLET_TYPES.MEW_CONNECT ||\n        this.identifier === WALLET_TYPES.WALLET_LINK\n      );\n    },\n    isOnLedger() {\n      return this.tx.data !== '0x' && this.identifier === WALLET_TYPES.LEDGER;\n    },\n    isNotSoftware() {\n      return this.isHardware || this.isWeb3Wallet || this.isOtherWallet;\n    },\n    showConfirmWithWallet() {\n      return this.isNotSoftware && (this.signing || this.error !== '');\n    },\n    transactions() {\n      const newArr =\n        this.unsignedTxArr.length > 0\n          ? [].concat(this.unsignedTxArr)\n          : isEmpty(this.tx)\n          ? []\n          : [this.tx];\n      return this.arrayParser(newArr);\n    },\n    allToDetails() {\n      const toNickname = this.addressBookStore.find(item => {\n        return this.tx.to?.toLowerCase() === item.address?.toLowerCase();\n      });\n      return {\n        ensName: this.toDetails.type === 'RESOLVED' ? this.toDetails.value : '',\n        nickname: toNickname ? toNickname.nickname : '',\n        selected: this.toDetails.type\n      };\n    },\n    gasPrice() {\n      if (!this.isBatch) {\n        const gasPrice = this.tx.gasPrice ? this.tx.gasPrice : '0x';\n        return fromWei(hexToNumberString(gasPrice), 'gwei');\n      }\n\n      const batchGasPrice = this.unsignedTxArr[0].gasPrice;\n      return fromWei(hexToNumberString(batchGasPrice), 'gwei');\n    },\n    gasLimit() {\n      if (!this.isBatch) {\n        const gasLimit = this.tx.gasLimit\n          ? this.tx.gasLimit\n          : this.tx.gas\n          ? this.tx.gas\n          : '0x';\n        return hexToNumberString(gasLimit);\n      }\n      const batchGasPrice = this.unsignedTxArr.reduce((acc, currentValue) => {\n        return acc.plus(currentValue.gas);\n      }, BigNumber(0));\n      return hexToNumberString(batchGasPrice);\n    },\n    txFee() {\n      const parsedTxFee = BigNumber(toWei(this.gasPrice, 'gwei'))\n        .times(this.gasLimit)\n        .toString();\n      return fromWei(parsedTxFee);\n    },\n    txFeeUSD() {\n      return this.getFiatValue(\n        BigNumber(this.txFee).times(this.fiatValue).toFixed(2)\n      );\n    },\n    value() {\n      if (!this.isBatch) {\n        const parsedValue = this.tx.value\n          ? this.tx.hasOwnProperty('toTxData')\n            ? this.tx.toTxData.amount\n            : fromWei(hexToNumberString(this.tx.value))\n          : '0x';\n        return parsedValue;\n      }\n      return '0';\n    },\n    disableBtn() {\n      if (this.error !== '') return true;\n      if (!this.signing) return true;\n      if (this.isBatch && this.identifier === WALLET_TYPES.LEDGER) {\n        return false;\n      }\n      return this.txSigned;\n    },\n    txSigned() {\n      return this.isBatch\n        ? this.signedTxArray.length > 0 &&\n            this.signedTxArray.length === this.unsignedTxArr.length\n        : !isEmpty(this.signedTxObject);\n    },\n    isBatch() {\n      return this.unsignedTxArr.length > 0;\n    },\n    signingPending() {\n      if (this.isBatch) {\n        return this.unsignedTxArr.length === this.signedTxArray.length;\n      }\n      return !isEmpty(this.signedTxObject);\n    },\n    /**\n     * Property returns string, deodning whether or not this is a swap or send\n     */\n    successTitle() {\n      return this.showSuccessSwap ? 'Swap initiated' : 'Transaction initiated';\n    },\n    /**\n     * Property returns string, depending whether or not this is a swap or send\n     */\n    successBodyText() {\n      return this.showSuccessSwap\n        ? 'Once completed, the token amount will be deposited to your wallet. This should take a few minutes depending on how congested the Ethereum network is.'\n        : 'Once completed, the token amount will be deposited to the address you provided. This should take a few minutes depending on how congested the Ethereum network is.';\n    }\n  },\n  watch: {\n    error(newVal) {\n      /**\n       * Reset signed values if any of the tx in batch is declined\n       */\n      if (newVal !== '') {\n        this.signedTxArray = [];\n        this.signedTxObject = {};\n      }\n    },\n    /**\n     * Closes modal then brings it back to the start fetching new address data\n     */\n    address(newVal) {\n      if (newVal) {\n        this.resetSuccess();\n      }\n    },\n    signedTxArray: {\n      handler: function (newVal) {\n        if (\n          this.isWeb3Wallet &&\n          newVal.length !== 0 &&\n          newVal.length === this.unsignedTxArr.length\n        ) {\n          if (this.isSwap) {\n            this.trackSwap(\n              'swapTransactionSuccessfullySent',\n              newVal[newVal.length - 1],\n              this.network.type.name\n            );\n          }\n          this.showTxOverlay = false;\n          this.showSuccess(newVal);\n        }\n      },\n      deep: true,\n      immediate: true\n    }\n  },\n  created() {\n    /**\n     * receives an @Array\n     * arr[0] is the tx\n     * arr[1] is the to details (nickname, ens name)\n     * arr[2] is the selected currency\n     */\n    EventBus.$on(EventNames.SHOW_TX_CONFIRM_MODAL, async (tx, resolver) => {\n      this.parseRawData(tx[0]);\n      this.title = 'Transaction Confirmation';\n      this.tx = tx[0];\n      this.resolver = resolver;\n      this.showTxOverlay = true;\n      this.tx.transactionFee = this.txFee;\n      this.isSwap = false; // reset isSwap\n      tx[0].transactionFee = this.txFee;\n      if (tx.length > 1) {\n        this.toDetails = tx[1];\n        this.sendCurrency = tx[2];\n      }\n      if (!this.isHardware && this.identifier !== WALLET_TYPES.WEB3_WALLET)\n        await this.signTx();\n    });\n    /**\n     * receives an @Array\n     * arr[0] is the tx\n     * arr[1] is the swap information\n     */\n    EventBus.$on(EventNames.SHOW_SWAP_TX_MODAL, async (arr, resolver) => {\n      this.tx = arr[0];\n      this.swapInfo = arr[1];\n      this.resolver = resolver;\n      this.showTxOverlay = true;\n      this.title = 'Verify Swap';\n      this.toNonEth = !this.swapInfo.toTokenType.isEth;\n      this.isSwap = true;\n      if (!this.isHardware && this.identifier !== WALLET_TYPES.WEB3_WALLET) {\n        await this.signTx();\n      }\n    });\n\n    /**\n     * receives an @Array\n     * arr[0] is the tx that may have confirmInfo\n     * which identifies the transaction as a swap tx\n     */\n    EventBus.$on(\n      EventNames.SHOW_BATCH_TX_MODAL,\n      async (arr, resolver, isHardware) => {\n        this.isHardwareWallet = isHardware;\n        if (arr[0].hasOwnProperty('confirmInfo')) {\n          this.swapInfo = arr[0].confirmInfo;\n          this.title = 'Verify Swap';\n          this.isSwap = true; // reset isSwap\n        } else {\n          this.isSwap = false; // reset isSwap\n        }\n        this.unsignedTxArr = arr;\n        if (!resolver) this.resolver = () => {};\n        this.resolver = resolver;\n        this.showTxOverlay = true;\n\n        if (!isHardware && this.identifier !== WALLET_TYPES.WEB3_WALLET) {\n          this.signBatchTx();\n        }\n      }\n    );\n    EventBus.$on(EventNames.SHOW_MSG_CONFIRM_MODAL, (msg, resolver) => {\n      this.title = 'Message Signed';\n      this.isSwap = false; // reset isSwap\n      this.instance\n        .signMessage(msg)\n        .then(res => {\n          const result = Buffer.from(res).toString('hex');\n          this.signature = JSON.stringify(\n            {\n              address: this.address,\n              msg: msg,\n              sig: result,\n              version: '3',\n              signer: this.isHardware ? this.identifier : 'MEW'\n            },\n            null,\n            2\n          );\n          this.signedMessage = result;\n          resolver(result);\n          this.showSignOverlay = true;\n        })\n        .catch(e => {\n          this.reset();\n          this.instance.errorHandler(e);\n        });\n    });\n    /**\n     * receives an @Object which contains info about the currency and rates\n     * and a resolver which resets the module confirmation\n     */\n    EventBus.$on(EventNames.SHOW_CROSS_CHAIN_MODAL, (txObj, resolver) => {\n      this.title = `Send ${txObj.fromType}`;\n      this.tx = txObj;\n      this.showCrossChainModal = true;\n      this.resolver = val => {\n        resolver(val);\n        this.reset();\n      };\n    });\n  },\n  beforeDestroy() {\n    EventBus.$off(EventNames.SHOW_TX_CONFIRM_MODAL);\n    EventBus.$off(EventNames.SHOW_SWAP_TX_MODAL);\n    EventBus.$off(EventNames.SHOW_MSG_CONFIRM_MODAL);\n    EventBus.$off(EventNames.SHOW_CROSS_CHAIN_MODAL);\n  },\n  mounted() {\n    if (this.isOfflineApp) {\n      this.footer = {\n        text: 'Need help? Email us at support@myetherwallet.com',\n        linkTitle: '',\n        link: ''\n      };\n    }\n  },\n  methods: {\n    rejectTransaction() {\n      if (this.isSwap) this.trackSwap('swapTxCancelled');\n      this.resolver({ rejected: true });\n      this.reset();\n    },\n    sendCrossChain(bool) {\n      this.trackSwap('swapSendCrossChain');\n      this.resolver(bool);\n    },\n    dataToAction(data) {\n      return dataToAction(data);\n    },\n    /**\n     * Methods scrolls to an element if element is open on click.\n     * Has To be a timeoute, on order to wait for the element to be open\n     */\n    scrollToElement(_id) {\n      setTimeout(() => {\n        if (this.panel.includes(_id)) {\n          const panel = document.getElementById(_id);\n          const wrapper = this.$refs.scrollableContent;\n          const options = { duration: 500, offset: -60 };\n          this.$vuetify.goTo(panel, { container: wrapper, ...options });\n        }\n      }, 500);\n    },\n    resetSuccess() {\n      this.showSuccessSwap = false;\n      this.reset();\n    },\n    reset() {\n      this.showTxOverlay = false;\n      this.showSignOverlay = false;\n      this.showSuccessModal = false;\n      this.showSuccessSwap = false;\n      this.showCrossChainModal = false;\n      this.toNonEth = false;\n      this.isSwap = false;\n      this.tx = {};\n      this.resolver = () => {};\n      this.title = '';\n      this.signedTxObject = {};\n      this.signature = '';\n      this.unsignedTxArr = [];\n      this.signedTxArray = [];\n      this.swapInfo = {};\n      this.sendCurrency = {};\n      this.toDetails = {};\n      this.signing = false;\n      this.links = {\n        explorer: ''\n      };\n      this.error = '';\n    },\n    parseRawData(tx) {\n      let tokenData = {};\n      if (tx.to && tx.data && tx.data.substr(0, 10) === '0xa9059cbb') {\n        tokenData = parseTokenData(tx.data, tx.to);\n        tx.fromTxData = {\n          currency: this.network.type.currencyName,\n          amount: tx.amount\n        };\n        tx.toTxData = {\n          currency: tokenData.tokenSymbol,\n          amount: tokenData.tokenTransferVal,\n          to: tokenData.tokenTransferTo\n        };\n      }\n      tx.network = this.network.type.name;\n    },\n    async sendBatchTransaction() {\n      const _this = this;\n      const web3 = this.web3;\n      const _method = 'sendSignedTransaction';\n      const _arr = this.signedTxArray;\n      const promises = _arr.map((tx, idx) => {\n        const _tx = tx.tx;\n        _tx.from = _this.address;\n        const _rawTx = tx.rawTransaction;\n        const promiEvent = web3.eth[_method](_rawTx);\n        _tx.network = _this.network.type.name;\n        _tx.gasPrice = isHex(_tx.gasPrice)\n          ? hexToNumberString(_tx.gasPrice)\n          : _tx.gasPrice;\n        _tx.transactionFee = fromWei(\n          BigNumber(_tx.gasPrice).times(_tx.gas).toString()\n        );\n        _tx.gasLimit = _tx.gas;\n        setEvents(promiEvent, _tx, _this.$store.dispatch);\n        promiEvent\n          .once('receipt', receipt => {\n            if (_this.isSwap && idx + 1 === _arr.length) {\n              const hash = receipt.transactionHash;\n              _this.trackSwap(\n                'swapTxReceivedReceipt',\n                hash,\n                this.network.type.chainID\n              );\n            }\n          })\n          .on('transactionHash', hash => {\n            const storeKey = sha3(\n              `${_this.network.type.name}-${_this.address.toLowerCase()}`\n            );\n            const localStoredObj = locStore.get(storeKey);\n            locStore.set(storeKey, {\n              nonce: sanitizeHex(\n                new BigNumber(localStoredObj.nonce).plus(1).toString(16)\n              ),\n              timestamp: localStoredObj.timestamp\n            });\n            if (idx + 1 === _arr.length) {\n              if (_this.isSwap) {\n                _this.showSuccessSwap = true;\n                _this.trackSwap(\n                  'swapTxBroadcasted',\n                  hash,\n                  this.network.type.chainID\n                );\n              }\n              _this.reset();\n              _this.showSuccess(hash);\n            }\n          })\n          .catch(err => {\n            if (_this.isSwap && idx + 1 === _arr.length) {\n              if (this.rejectedError(err.message)) {\n                _this.trackSwap('swapTxRejected');\n              } else {\n                _this.emitSwapTxFail(err);\n              }\n            }\n          });\n        return promiEvent;\n      });\n      this.resolver(promises);\n    },\n    sendSignedTx() {\n      const hash = this.signedTxObject.tx.hash;\n      this.resolver(this.signedTxObject);\n      if (this.isSwap) {\n        this.showSuccessSwap = true;\n      }\n      if (this.tx.data && this.tx.data.includes('0x33aaf6f2')) {\n        this.trackDapp('ethBlocksMinted');\n      }\n      this.reset();\n      this.showSuccess(hash);\n    },\n    showSuccess(param) {\n      if (isArray(param)) {\n        const lastHash = param[param.length - 1].tx.hash;\n        this.links.explorer = this.network.type.blockExplorerTX.replace(\n          '[[txHash]]',\n          lastHash\n        );\n        this.showSuccessModal = true;\n        if (this.isSwap) {\n          this.trackSwap(\n            'swapTransactionSuccessfullySent',\n            lastHash,\n            this.network.type.name\n          );\n        }\n        return;\n      }\n\n      this.links.explorer = this.network.type.blockExplorerTX.replace(\n        '[[txHash]]',\n        param\n      );\n      this.showSuccessModal = true;\n      if (this.isSwap) {\n        this.trackSwap(\n          'swapTransactionSuccessfullySent',\n          param,\n          this.network.type.chainID\n        );\n      }\n    },\n    async signTx() {\n      this.error = '';\n      if (this.isNotSoftware) {\n        this.signing = true;\n      }\n      if (this.isWeb3Wallet) {\n        const event = this.instance.signTransaction(this.tx);\n        event\n          .on('transactionHash', res => {\n            if (this.isSwap) {\n              this.trackSwap(\n                'swapTxBroadcasted',\n                res,\n                this.network.type.chainID\n              );\n            }\n            this.showTxOverlay = false;\n            this.showSuccess(res);\n          })\n          .once('receipt', receipt => {\n            if (this.isSwap) {\n              const hash = receipt.transactionHash;\n              this.trackSwap(\n                'swapTxReceivedReceipt',\n                hash,\n                this.network.type.chainID\n              );\n            }\n          })\n          .catch(e => {\n            if (this.isSwap) {\n              if (this.rejectedError(e.message)) {\n                this.trackSwap('swapTxRejected');\n              } else {\n                this.emitSwapTxFail(e);\n              }\n            }\n            this.signedTxObject = {};\n            this.error = errorHandler(e);\n            this.signing = false;\n          });\n        this.resolver(event);\n      } else {\n        await this.instance\n          .signTransaction(this.tx)\n          .then(res => {\n            this.signedTxObject = res;\n            if (this.isHardware && this.txSigned) {\n              this.btnAction();\n            }\n          })\n          .catch(e => {\n            if (this.isSwap) this.trackSwap('swapTxCancelled');\n            this.signedTxObject = {};\n            this.error = errorHandler(e);\n            this.signing = false;\n            const toastError = errorHandler(e, true);\n            if (toastError) this.instance.errorHandler(toastError);\n          });\n      }\n    },\n    async signBatchTx() {\n      this.error = '';\n      const signed = [];\n      const batchTxEvents = [];\n      if (this.isNotSoftware) {\n        this.signing = true;\n      }\n      for (let i = 0; i < this.unsignedTxArr.length; i++) {\n        const objClone = cloneDeep(this.unsignedTxArr[i]);\n        // fixes circular reference for signing\n        delete objClone['handleNotification'];\n        delete objClone['currency'];\n        delete objClone['confirmInfo'];\n        try {\n          if (!this.isWeb3Wallet) {\n            const _signedTx = await this.instance.signTransaction(objClone);\n            if (this.unsignedTxArr[i].hasOwnProperty('handleNotification')) {\n              _signedTx.tx['handleNotification'] =\n                this.unsignedTxArr[i].handleNotification;\n            }\n            signed.push(_signedTx);\n            if (this.isHardware && this.txSigned) {\n              this.btnAction();\n            }\n          } else {\n            await this.instance\n              .signTransaction(objClone)\n              .then(event => {\n                const hash = event.transactionHash;\n                signed.push({\n                  tx: {\n                    hash: hash\n                  }\n                });\n                batchTxEvents.push(event);\n                const storeKey = sha3(\n                  `${this.network.type.name}-${this.address.toLowerCase()}`\n                );\n                const localStoredObj = locStore.get(storeKey);\n                locStore.set(storeKey, {\n                  nonce: sanitizeHex(\n                    new BigNumber(localStoredObj.nonce).plus(1).toString(16)\n                  ),\n                  timestamp: localStoredObj.timestamp\n                });\n                if (this.isSwap && i + 1 === this.unsignedTxArr.length) {\n                  this.trackSwap(\n                    'swapTxReceivedReceipt',\n                    hash,\n                    this.network.type.chainID\n                  );\n                }\n              })\n              .catch(e => {\n                if (this.isSwap) {\n                  if (this.rejectedError(e.message)) {\n                    this.trackSwap('swapTxRejected');\n                    throw new Error(e.message);\n                  } else {\n                    this.emitSwapTxFail(e);\n                  }\n                }\n                this.signing = false;\n                this.instance.errorHandler(e.message);\n                throw new Error(e.message);\n              });\n          }\n          this.signedTxArray = signed;\n        } catch (err) {\n          if (this.isSwap && !this.isWeb3Wallet) {\n            this.emitSwapTxFail(err);\n          }\n          this.error = errorHandler(err);\n          this.signedTxArray = [];\n          if (this.rejectedError(err.message) && signed.length > 0) {\n            this.resolver(\n              new Error('Batch transaction rejected in between transactions!')\n            );\n          } else {\n            this.resolver(new Error(err.message));\n          }\n          // close modal if user\n          // rejected in between multiple\n          // transaction\n          if (signed.length > 0) {\n            this.reset();\n          }\n          return;\n        }\n      }\n      if (!this.isWeb3Wallet && !this.isHardware && !this.isOtherWallet) {\n        this.signing = false;\n      }\n      if (this.isWeb3Wallet) this.resolver(batchTxEvents);\n    },\n    rejectedError(msg) {\n      return (\n        msg === 'MetaMask Tx Signature: User denied transaction signature.' ||\n        msg === 'User Rejected Request: The user rejected the request.'\n      );\n    },\n    emitSwapTxFail(err) {\n      const hash = err?.receipt?.transactionHash;\n      this.trackSwap('swapTxFailedV2', hash, this.network.type.chainID);\n    },\n    btnAction() {\n      if (this.isSwap) {\n        this.trackSwap('swapTransactionSend');\n      }\n      if (!this.isWeb3Wallet) {\n        if (\n          (this.signedTxArray.length === 0 ||\n            this.signedTxArray.length < this.unsignedTxArr.length) &&\n          isEmpty(this.signedTxObject)\n        ) {\n          this.isBatch ? this.signBatchTx() : this.signTx();\n          return;\n        }\n        this.isBatch ? this.sendBatchTransaction() : this.sendSignedTx();\n        return;\n      }\n      this.isBatch ? this.signBatchTx() : this.signTx();\n    },\n    copyToClipboard() {\n      this.$refs.messageConfirmationContainer.$refs.signatureContent.$refs.input.select();\n      document.execCommand('copy');\n      window.getSelection().removeAllRanges();\n      Toast(this.$t('common.copied'), {}, SUCCESS);\n      this.reset();\n    },\n    arrayParser(arr) {\n      const newArr = arr.map(item => {\n        const gasLimit = item.gasLimit\n          ? item.gasLimit\n          : item.gas\n          ? item.gas\n          : '0x';\n        const gasPrice = item.gasPrice ? item.gasPrice : '0x';\n        const data = item.data\n          ? item.data\n          : item.hasOwnProperty('encodeABI')\n          ? item.encodeABI()\n          : '0x';\n        const symbol = isEmpty(this.sendCurrency)\n          ? this.network.type.currencyName\n          : this.sendCurrency.symbol;\n        const value =\n          data !== '0x'\n            ? !this.isSwap && !this.isBatch\n              ? `${this.value} ${symbol}`\n              : `0 ${this.network.type.currencyName}`\n            : `${this.value} ${symbol}`;\n        const from = item.from ? item.from : this.address;\n        const toAdd = item.to ? item.to : this.txTo;\n        return [\n          {\n            title: 'Network',\n            value: this.network.type.name_long\n          },\n          {\n            title: 'From ENS',\n            value: ''\n          },\n          {\n            title: 'From address',\n            value: from\n          },\n          {\n            title:\n              data !== '0x' && !this.isBatch\n                ? 'Via Contract Address'\n                : 'To address',\n            value: toAdd\n          },\n          {\n            title: 'Sending',\n            value: value\n          },\n          {\n            title: 'Gas Price',\n            value: fromWei(hexToNumberString(gasPrice), 'gwei') + ' gwei'\n          },\n          {\n            title: 'Gas Limit',\n            value: hexToNumberString(gasLimit)\n          },\n          // {\n          //   title: 'Transaction fee',\n          //   value: `${this.txFee} ${this.network.type.currencyName} ~ $${this.txFeeUSD}`\n          // },\n          {\n            title: 'Nonce',\n            value: hexToNumber(item.nonce)\n          },\n          {\n            title: 'Data',\n            value: data\n          }\n        ].filter(item => {\n          if (item.value !== '') return item;\n        });\n      });\n      return newArr;\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n$borderPanels: 1px solid var(--v-greyLight-base) !important;\n\n.data-values {\n  overflow-wrap: break-word;\n}\n.expansion-header {\n  height: 60px;\n}\n.ledger-warning {\n  border: 1px solid #d7dae3;\n}\n</style>\n"],"sourceRoot":""}